@page "/actores/editar/{ActorId:int}"
@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject SweetAlertService swal

<PageTitle>Editar Actor</PageTitle>

<h1>Editar Actor</h1>
@if(Actor == null)
{
    <p>Cargando...</p>
}
else
{
    <FormularioActores Actor="Actor" OnValidSubmit="Editar" />
}


@code{
    [Parameter] public int ActorId{get; set;}
    Actor? Actor;

    protected override async Task OnInitializedAsync()
    {
        var respuestaHTTP = await repositorio.Get<Actor>($"api/actores/{ActorId}");
        if (respuestaHTTP.Error)
        {
            if (respuestaHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/actores");
            }
            else
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            Actor = respuestaHTTP.Response;

        }

    }

    private async Task Editar()
    {
        var respuestaHTTP = await repositorio.Put<Actor>($"api/actores", Actor!);
        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
           
            navigationManager.NavigateTo("/actores");
        }

    }
}
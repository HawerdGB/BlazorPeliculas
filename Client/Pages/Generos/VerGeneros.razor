@page "/generos"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Indice Generos</h3>


<div class="mb-3">
    <a href="generos/crear" class="btn btn-info">Agregar</a>
</div>
<ListadoGenerico Listado="Generos">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Generos!)
                {
                    <tr>

                        <td>
                            <a href="/generos/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button class="btn btn-danger"
                            @onclick=@(()=> Borrar(item))>Borrar</button>
                        </td>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>
@code 
{
    List<Genero>? Generos { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }



    private async Task Cargar()
    {
        var respuestaHTTP = await repositorio.Get<List<Genero>>("api/generos");
        Generos = respuestaHTTP.Response;
    }

    private async Task Borrar(Genero genero)
    {
        var respuestaHTTP = await repositorio.Delete($"api/generos/{genero.Id}");

                   if (respuestaHTTP.Error)
            {
                if (respuestaHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigationManager.NavigateTo("/");
                }
                else
                {
                    var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                    await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                }
            }
            else
            {
                await Cargar();
            }
        
    }
}
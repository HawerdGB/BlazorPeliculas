@page "/peliculas/buscar"
@inject IRepositorio repos
@inject NavigationManager navigationManager

<h3>FiltroPeliculas</h3>

<div class="row g-3 align-items-center mb-3">
    <div class="col-sm-3">
        <input type="text" class="form-control" placeholder="Titulo Peicula" id="titulo"
        autocomplete="off"
        @bind="@titulo" @bind:event="oninput" 
        @onkeypress="@((KeyboardEventArgs e) => TituloKeyPress(e))" />
    </div>
    <div class="col-sm-3">
        <select class="form-select" @bind="generoSeleccionado">
            <option value="0">Seleccione un genero</option>
            @foreach (var item in generos)
            {
                <option value="@item.Id">@item.Nombre</option>    
            }
        </select>

    </div>
    <div class="col-sm-6" style="display:flex;">
        <div class="form-check me-2">
            <input class="form-check-input" type="checkbox" id="estrenos" @bind="futurosEstrenos" />
            <label class="form-check-label" for="estrenos">Futuros Estrenos</label>
        </div>
        <div class="form-check me-2">
            <input class="form-check-input" type="checkbox" id="cartelera" @bind="enCartelera" />
            <label class="form-check-label" for="cartelera">En Cartelera</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="masVotadas" @bind="masVotadas" />
            <label class="form-check-label" for="masVotadas">Mas Votadas</label>
        </div>
    </div>

    <div class="col-12 d-flex gap-2">
        <button class="btn btn-outline-primary btn-sm d-flex align-items-center gap-1" style="min-width: 110px;" @onclick="CargarNuevasPeliculas">
            <i class="bi bi-funnel"></i>
            <span class="d-none d-md-inline">Filtrar</span>
        </button>
        <button class="btn btn-outline-danger btn-sm d-flex align-items-center gap-1" style="min-width: 110px;" @onclick="LimpiarFiltros">
            <i class="bi bi-x-circle"></i>
            <span class="d-none d-md-inline">Limpiar</span>
        </button>
    </div>
</div>

<Paginacion PaginaActual="paginaActual" PaginasTotales="paginasTotales" PaginaSeleccionada="PaginaSeleccionada" />


<ListadoPeliculas Peliculas="Peliculas" />
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string titulo { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery(Name ="generoid")]
    public int generoSeleccionado { get; set; }
    private List<Genero> generos = new List<Genero>();
    [Parameter]
    [SupplyParameterFromQuery(Name = "estrenos")]
    public bool futurosEstrenos { get; set; } = false;
    [Parameter]
    [SupplyParameterFromQuery(Name = "encartelera")]
    public bool enCartelera { get; set; } = false;
    [Parameter]
    [SupplyParameterFromQuery(Name = "masvotadas")]
    public bool masVotadas { get; set; } = false;
    private List<Pelicula>? Peliculas;
    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();
    [Parameter]
    [SupplyParameterFromQuery(Name = "pagina")]
    public int paginaActual { get; set; } = 1;
    private int paginasTotales;


    protected override async Task OnInitializedAsync()
    {
        if (paginaActual == 0)
        {
            paginaActual = 1;
        }

        await ObtenerGeneros();
        var queryStrings = GenerarQueryString();
        await RealizarBusqueda(queryStrings);
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevasPeliculas();
    }

    private async Task ObtenerGeneros()
    {
        var respuestaHttp = await repos.Get<List<Genero>>("api/generos");
        generos = respuestaHttp.Response!;
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            await  CargarNuevasPeliculas();
        }
    }

    private async Task CargarNuevasPeliculas()
    {
        var queryString = GenerarQueryString();
        var url = $"/peliculas/buscar?{queryString}";
        navigationManager.NavigateTo(url);
        await RealizarBusqueda(queryString);
    }

    private async Task RealizarBusqueda(string queryString)
    {
        var url = $"/api/peliculas/filtrar?{queryString}";
        var respuestaHttp = await repos.Get<List<Pelicula>>(url);
        paginasTotales = int.Parse(respuestaHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault() ?? "1");
        Peliculas = respuestaHttp.Response;
    }

    private string GenerarQueryString()
    {
        if (queryStringsDict is null)
        {
            queryStringsDict = new Dictionary<string, string>();
        }

            queryStringsDict["generoid"] = generoSeleccionado.ToString();
            queryStringsDict["titulo"] = titulo?? string.Empty;
            queryStringsDict["encartelera"] = enCartelera.ToString();
            queryStringsDict["estrenos"] = futurosEstrenos.ToString();
            queryStringsDict["masvotadas"] = masVotadas.ToString();
            queryStringsDict["pagina"] = paginaActual.ToString();
      
            var valoresPorDefecto = new List<string> { "False", "", "0" };

            return string.Join("&", queryStringsDict
                .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
       
      
    }

    private async Task LimpiarFiltros()
    {
        titulo = "";
        generoSeleccionado = 0;
        futurosEstrenos = false;
        enCartelera = false;
        masVotadas = false;
        await CargarNuevasPeliculas();
    }
}
